generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Sponsor {
  id        String             @id @default(cuid())
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  name      String             @unique
  contact   String?
  portfolio PortfolioCompany[]
}

model PortfolioCompany {
  id            String      @id @default(cuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  asset         String
  dateInvested  DateTime?
  fsnSector     String?
  webpage       String?
  note          String?
  nextSteps     String?
  financials    String?
  location      String?
  sponsorId     String
  Alert         Alert[]
  comments      Comment[]
  sponsor       Sponsor     @relation(fields: [sponsorId], references: [id])
  watchlistedBy Watchlist[]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  alerts        Alert[]
  comments      Comment[]
  runs          Run[]
  sessions      Session[]
  watchlist     Watchlist[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Comment {
  id        String           @id @default(cuid())
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  content   String
  authorId  String
  companyId String
  author    User             @relation(fields: [authorId], references: [id])
  company   PortfolioCompany @relation(fields: [companyId], references: [id])
}

model Watchlist {
  id        String           @id @default(cuid())
  createdAt DateTime         @default(now())
  userId    String
  companyId String
  company   PortfolioCompany @relation(fields: [companyId], references: [id])
  user      User             @relation(fields: [userId], references: [id])

  @@unique([userId, companyId])
}

model Alert {
  id        String            @id @default(cuid())
  createdAt DateTime          @default(now())
  readAt    DateTime?
  type      String
  message   String
  userId    String
  companyId String?
  company   PortfolioCompany? @relation(fields: [companyId], references: [id], onDelete: Restrict)
  user      User              @relation(fields: [userId], references: [id])
}

model Run {
  id                 String   @id @default(cuid())
  createdAt          DateTime @default(now())
  durationMs         Int
  inputSponsor       String
  portfolioUrlsCount Int
  crawledCount       Int
  extractedCount     Int
  normalizedCount    Int
  enrichedCount      Int
  userId             String?
  user               User?    @relation(fields: [userId], references: [id], onDelete: Restrict)
}
